Use blinkit_db;

/*1. Delivery Efficiency and Time Difference
Question: What is the average difference (in minutes) between the Promised Delivery 
Time and the Actual Delivery Time for all orders that were delivered 'Late'?*/

SELECT 
    AVG(TIMESTAMPDIFF(MINUTE, promised_delivery_time, actual_delivery_time)) AS Avg_Late_Delivery_Duration_Mins
FROM 
    blinkit_orders_cleaned
WHERE 
    delivery_status IN ('Slightly Delayed', 'Significantly Delayed');

/*2. Segmented Product Sales
Question: What is the total revenue generated by customers in the 'Premium' 
segment who purchased products from the 'Fruits & Vegetables' category?*/

SELECT
    SUM(o.order_total) AS Total_Revenue_From_Premium_F_V
FROM
    blinkit_orders_cleaned o
JOIN
    blinkit_customers_cleaned c ON o.customer_id = c.customer_id
JOIN
    blinkit_order_iteam_cleaned oi ON o.order_id = oi.order_id
JOIN
    blinkit_products_cleaned p ON oi.product_id = p.product_id
WHERE
    c.customer_segment = 'Premium'
    AND p.category = 'Fruits & Vegetables';
    
    /*3. Product Profit Margin Analysis
Question: Find the average percentage margin on products sold in the 'Bakery' 
category where the total quantity sold for that product is greater than 100 units.*/

SELECT 
    p.product_name,
    p.margin_percentage,
    SUM(oi.quantity) AS Total_Units_Sold
FROM 
    blinkit_products_cleaned p
JOIN 
    blinkit_order_iteam_cleaned oi 
    ON p.product_id = oi.product_id
WHERE 
    p.category = 'Dairy & Breakfast'
GROUP BY 
    p.product_name, p.margin_percentage
ORDER BY 
    Total_Units_Sold DESC;
    
    SELECT 
    AVG(p.margin_percentage) AS Avg_Margin_Percentage
FROM 
    blinkit_products_cleaned p
JOIN 
    blinkit_order_iteam_cleaned oi 
    ON p.product_id = oi.product_id
WHERE 
    p.category = 'Dairy & Breakfast';
/*4. Delivery Efficiency and Time Difference
Question: What is the average difference (in minutes) between the Promised 
Delivery Time and the Actual Delivery Time for all orders that were delivered 'Late'?*/

SELECT 
    AVG(TIMESTAMPDIFF(MINUTE, promised_delivery_time, actual_delivery_time)) AS Avg_Late_Delivery_Duration_Mins
FROM 
    blinkit_orders_cleaned
WHERE 
    delivery_status IN ('Slightly Delayed', 'Significantly Delayed');
SELECT 
    delivery_status,
    AVG(TIMESTAMPDIFF(MINUTE, promised_delivery_time, actual_delivery_time)) AS Avg_Late_Delivery_Duration_Mins
FROM 
    blinkit_orders_cleaned
WHERE 
    delivery_status IN ('Slightly Delayed', 'Significantly Delayed')
GROUP BY 
    delivery_status;

    /*5. Segmented Product Sales
Question: What is the total revenue generated by customers in the 'Premium' 
segment who purchased products from the 'Fruits & Vegetables' category?*/

SELECT
    SUM(o.order_total) AS Total_Revenue_From_Premium_F_V
FROM
    blinkit_orders_cleaned o
JOIN
    blinkit_customers_cleaned c ON o.customer_id = c.customer_id
JOIN
    blinkit_order_iteam_cleaned oi ON o.order_id = oi.order_id
JOIN
    blinkit_products_cleaned p ON oi.product_id = p.product_id
WHERE
    c.customer_segment = 'Premium'
    AND p.category = 'Fruits & Vegetables';
    
/*6. Product Profit Margin Analysis
Question: Find the average percentage margin on products sold in the 
'Pharmacy' category where the total quantity sold for that product is greater than 100 units.*/

SELECT 
    AVG(p.margin_percentage) AS Avg_Margin_Percentage
FROM 
    blinkit_products_cleaned p
JOIN 
    blinkit_order_iteam_cleaned oi 
    ON p.product_id = oi.product_id
WHERE 
    p.category = 'Pharmacy'
GROUP BY 
    p.product_id, p.product_name, p.margin_percentage
HAVING 
    SUM(oi.quantity) > 10;
    
    SELECT 
    AVG(p.margin_percentage) AS Avg_Margin_Percentage
FROM 
    blinkit_products_cleaned p
JOIN 
    blinkit_order_iteam_cleaned oi 
    ON p.product_id = oi.product_id
WHERE 
    p.category = 'Pharmacy';
    
/*7. Customer Retention Metric (Registration)
Question: For the month of July 2024, what was the ratio of New customer registrations 
to Regular customer registrations?*/

SELECT
    SUM(CASE WHEN customer_segment = 'New' THEN 1 ELSE 0 END) * 1.0 / 
    SUM(CASE WHEN customer_segment = 'Regular' THEN 1 ELSE 0 END) AS New_to_Regular_Ratio
FROM
    blinkit_customers_cleaned
WHERE
    YEAR(registration_date) = 2024
    AND MONTH(registration_date) = 7;
    
/*8. Feedback Impact on Orders
Question: What percentage of all orders received a 'Negative' sentiment feedback from customers?*/

SELECT
    (SUM(CASE WHEN f.sentiment = 'Negative' THEN 1 ELSE 0 END) * 100.0 / COUNT(o.order_id)) AS Negative_Feedback_Order_Percentage
FROM
    blinkit_orders_cleaned o
LEFT JOIN
    Blinkit_Customer_Feedback_CLEANED f ON o.order_id = f.order_id;